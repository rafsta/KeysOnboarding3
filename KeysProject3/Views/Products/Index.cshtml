@{
    ViewBag.Title = "Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Products</h2>

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")

<table data-bind="ProductModel" class="table table-light table-hover" id="ProductsTable">
    <thead>
        <tr>
            <th style="display: none">Id</th>
            <th>Name</th>
            <th>Price</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>
    <tbody id="BodyTag" data-bind="foreach: products">
        <tr>
            <td style="display:none" id="IdTag" data-bind="text: id"></td>
            <td id="NameTag" data-bind="text: name"></td>
            <td id="PriceTag" data-bind="text: price"></td>
            <td>
                <button data-bind="click:$parent.updateBtn" class="btn btn-warning" data-target="#editProductModal" data-toggle="modal" type="button">
                    Edit
                </button>
            </td>
            <td>
                <button data-bind="click:$parent.deleteBtn" class="btn btn-danger" data-target="#deleteProductModal" data-toggle="modal" type="button">
                    Delete
                </button>
            </td>
        </tr>
    </tbody>
</table>

@section scripts
{
    <script>
        //Load table data
        $(function () {
            //Customise default validation configuration
            ko.validation.init({
                messagesOnModified: true, //Validation activated by triggers
                parseInputAttributes: true, //Validation by HTML5 validation attributes
                registerExtenders: true, //Use custom validation rules in extended observables
                insertMessages: true, //Show validation messages under the binding object
                messageTemplate: null
            }, true);

            //Model
            function Product(data) {
                //Two way binding for product elements
                this.id = ko.observable(data.id);
                this.name = ko.observable(data.name).extend({ required: { message: "Please enter a name for the product." } });
                this.price = ko.observable(data.price).extend({ required: { message: "Please enter a price for the product." } });
            }

            //Viewmodel
            var ProductModel = {
                id: ko.observable(),
                name: ko.observable().extend({ required: { message: "Please enter a name for the product." } }),
                price: ko.observable().extend({ required: { message: "Please enter a price for the product." } }),
                product: ko.observable(),
                products: ko.observableArray(),

                //Load Product data to table
                loadProducts: function () {
                    ProductModel.products.removeAll();
                    $.getJSON("/api/products", function (data) {
                        $.each(data, function (key, value) {//jQuery loop
                            ProductModel.products.push(new Product(value));
                        });
                    });
                },

                //Create Product
                createProduct: function () {
                    if (ProductModel.errors().length === 0) {//No validation conflicts before sending data
                        var created = ko.toJSON(this);
                        $.ajax({
                            url: "/api/products",
                            cache: false,
                            type: "POST",
                            contentType: 'application/json; charset=utf-8',
                            data: created,
                            success: function (data) {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        ProductModel.errors.showAllMessages();
                    }
                },

                //Chosen option for update/delete modal
                chosenProduct: ko.observable(),

                //Delete Product
                deleteBtn: function (product) {
                    ProductModel.chosenProduct(product);
                },
                deleteProduct: function () {
                    var id = ko.toJS(ProductModel.chosenProduct()).id;
                    $.ajax({
                        url: "/api/products/" + id,
                        cache: false,
                        type: "DELETE",
                        contentType: 'application/json; charset=utf-8',
                        success: function () {
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    });
                },

                //Update Product
                updateBtn: function (product) {
                    ProductModel.chosenProduct(product);
                    ProductModel.name.rules.remove(function (x) { return x.rule === "required" });
                    ProductModel.price.rules.remove(function (x) { return x.rule === "required" });
                },
                changeProduct: function () {
                    if (ProductModel.errors().length === 0) {//No validation conflicts before sending data
                        var updatedProduct = ko.toJS(ProductModel.chosenProduct);
                        $.ajax({
                            url: "/api/products/" + updatedProduct.id,
                            cache: false,
                            type: "PUT",
                            contentType: 'application/json; charset=utf-8',
                            data: ko.toJSON(updatedProduct),
                            processData: true,
                            success: function () {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        ProductModel.errors.showAllMessages();
                    }
                },
            }
            //Validate all properties of ProductModel and its 'child' properties
            ProductModel.errors = ko.validation.group(ProductModel, { deep: true });
            ko.applyBindings(ProductModel);
            ProductModel.loadProducts();
        });



    </script>}