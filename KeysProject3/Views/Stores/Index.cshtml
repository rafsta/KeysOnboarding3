@{
    ViewBag.Title = "Stores";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Stores</h2>

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")

<table data-bind="StoreModel" class="table table-light table-hover" id="storestable">
    <thead>
        <tr>
            <th style="display: none">Id</th>
            <th>Store Name</th>
            <th>Address</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>
    <tbody id="BodyTag" data-bind="foreach: stores">
        <tr>
            <td style="display:none" id="IdTag" data-bind="text: id"></td>
            <td id="NameTag" data-bind="text: name"></td>
            <td id="AddressTag" data-bind="text: address"></td>
            <td>
                <button data-bind="click:$parent.updateBtn" class="btn btn-warning" data-target="#editStoreModal" data-toggle="modal" type="button">
                    Edit
                </button>
            </td>
            <td>
                <button data-bind="click:$parent.deleteBtn" class="btn btn-danger" data-target="#deleteStoreModal" data-toggle="modal" type="button">
                    Delete
                </button>
            </td>
        </tr>
    </tbody>
</table>

@section scripts
    {
    <script>
        //Load table data
        $(function () {
            //Customise default validation configuration
            ko.validation.init({
                messagesOnModified: true, //Validation activated by triggers
                parseInputAttributes: true, //Validation by HTML5 validation attributes
                registerExtenders: true, //Use custom validation rules in extended observables
                insertMessages: true, //Show validation messages under the binding object
                messageTemplate: null
            }, true);

            //Model
            function Store(data) {
                this.id = ko.observable(data.id);
                this.name = ko.observable(data.name).extend({ required: { message: 'Please enter a name for the store.' } });
                this.address = ko.observable(data.address).extend({ required: { message: 'Please enter an address for the store.' } });
            }

            //Viewmodel
            var StoreModel = {
                id: ko.observable(),
                name: ko.observable().extend({ required: { message: "Please enter a name for the store." } }),
                address: ko.observable().extend({ required: { message: "Please enter an address for the store." } }),
                store: ko.observable(),
                stores: ko.observableArray(),

                //Load Store data to table
                loadStores: function () {
                    StoreModel.stores.removeAll();
                    $.getJSON("api/stores", function (data) {
                        $.each(data, function (key, value) {//jQuery loop
                            StoreModel.stores.push(new Store(value));
                        });
                    });
                },

                //Create Store
                createStore: function () {
                    if (StoreModel.errors().length === 0) {//No validation conflicts before sending data
                        var created = ko.toJSON(this);
                        $.ajax({
                            url: 'api/stores',
                            cache: false,
                            type: 'POST',
                            contentType: 'application/json; charset=utf-8',
                            data: created,
                            success: function (data) {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        StoreModel.errors.showAllMessages();
                    }
                },


                //Chosen option for update/delete modal
                chosenStore: ko.observable(),

                //Delete Store
                deleteBtn: function (store) {
                    StoreModel.chosenStore(store);
                },
                deleteStore: function () {
                    var id = ko.toJS(StoreModel.chosenStore()).id;
                    $.ajax({
                        url: '/api/stores/' + id,
                        cache: false,
                        type: 'DELETE',
                        contentType: 'application/json; charset=utf-8',
                        success: function () {
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    });
                },

                //Update Store
                updateBtn: function (store) {
                    StoreModel.chosenStore(store);
                    StoreModel.name.rules.remove(function (x) { return x.rule === "required" });
                    StoreModel.address.rules.remove(function (x) { return x.rule === "required" });
                },
                    changeStore: function () {
                        if (StoreModel.errors().length === 0) {//No validation conflicts before sending data
                    var updatedStore = ko.toJS(StoreModel.chosenStore);
                    $.ajax({
                        url: '/api/stores/' + updatedStore.id,
                        cache: false,
                        type: 'PUT',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(updatedStore),
                        processData: true,
                        success: function () {
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                            }
                        });
                    } else {
                        StoreModel.errors.showAllMessages();
                    }
                },
            }
            //Validate all properties of StoreModel and its 'child' properties
            StoreModel.errors = ko.validation.group(StoreModel, { deep: true });
            ko.applyBindings(StoreModel);
            StoreModel.loadStores();
        });


    </script>}