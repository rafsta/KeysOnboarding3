@{
    ViewBag.Title = "Stores";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Stores</h2>

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")

<table class="table table-light table-hover" id="storestable">
    <thead>
        <tr>
            <th>Store Name</th>
            <th>Address</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>
    <tbody id="BodyTag" data-bind="foreach: Stores">
        <tr>
            <td style="display:none" id="IdTag" data-bind="text: id"></td>
            <td id="NameTag" data-bind="text: name"></td>
            <td id="AddressTag" data-bind="text: address"></td>
            <td>
                <button data-bind="editBtn" class="btn btn-warning" data-target="#editStoreModal" data-toggle="modal" type="button">
                    Edit
                </button>
            </td>
            <td>
                <button data-bind="deleteBtn" class="btn btn-danger" data-target="#deleteStoreModal" data-toggle="modal" type="button">
                    Delete
                </button>
            </td>
        </tr>
    </tbody>
</table>

@section scripts
    {
    <script>
        //Load table data
        $(function () {
            //Customise default validation configuration
            ko.validation.init({
                messagesOnModified: true, //Validation activated by triggers
                parseInputAttributes: true //Validation by HTML5 validation attributes
            });

            //Model
            function Store(data) {
                this.id = ko.observable(data.id);
                this.name = ko.observable(data.name).extend({ required: { message: 'Please enter a name for the store.' } });
                this.address = ko.observable(data.address).extend({ required: { message: 'Please enter an address for the store.' } });
            }

            //Viewmodel
            function StoreModel(id, name, address) {
                var Store = {
                    id: ko.observable(),
                    name: ko.observable().extend({ required: { message: "Please enter a name for the store." } }),
                    address: ko.observable().extend({ required: { message: "Please enter an address for the store." } }),
                    Store = ko.observable(),
                    Stores = ko.observableArray(),

                    //Load Customer data to table
                    loadStores: function () {
                        StoreModel.stores.removeAll();
                        $.getJSON("api/stores", function (data) {
                            $.each(data, function (key, value) {//jQuery loop
                                StoreModel.stores.push(new Store(value));
                            });
                        });
                    },

                    //Create Store
                    createStore: function () {
                        var data = created;
                        $.ajax({
                            url: 'api/stores',
                            cache: false,
                            type: 'POST',
                            contentType: 'application/json; charset=utf-8',
                            data: ko.toJSON(Store),
                            success: function (data) {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    },

                    //Delete Store
                    chosenStore: ko.observable(),
                    deleteBtn: function (store) {
                        StoreModel.chosenStore(store);
                    },
                    deleteStor: function (store) {
                        var id = ko.toJS(StoreModel.chosenStore()).id;
                        $.ajax({
                            url: 'api/stores' + id,
                            cache: false,
                            type: 'POST',
                            contentType: 'application/json; charset=utf-8',
                            data: Id,
                            success: function (data) {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    },

                    //Update Store
                    updateBtn: function (store) {
                        StoreModel.chosenStore(store);
                    },
                    changeStore: function () {
                        var updatedStore = ko.toJS(StoreModel.chosenStore);
                        $.ajax({
                            url: 'api/stores' + updatedStore.id,
                            cache: false,
                            type: 'PUT',
                            contentType: 'application/json; charset=utf-8',
                            data: ko.toJSON(Store),
                            success: function () {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    },
                }
                //Validate all properties of StoreModel and its 'child' properties
                StoreModel.errors = ko.validation.group(StoreModel, { deep: true });
                var StoreViewModel = new StoreModel();
                ko.applyBindings(StoreViewModel);
            });


    </script>}