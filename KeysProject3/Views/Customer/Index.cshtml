@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")

<h2>Customers</h2>

<table class="table table-light table-hover" id="CustomersTable">
    <thead>
        <tr>
            <th>Customer Name</th>
            <th>Address</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: Customers">
    </tbody>
</table>

@section scripts
{
    <script>
        function CustomerViewModel() {

            //Make the self as 'this' reference
            var self = this;
            //Declare observable which will be bind with UI
            self.Id = ko.observable("");
            self.Name = ko.observable("");
            self.Address = ko.observable("");

            var Customer = {
                Id: self.Id,
                Name: self.Name,
                Address: self.Address,
            };

            self.Customer = ko.observable();
            self.Customers = ko.observableArray(); // Contains the list of Customers

            // Initialize the view-model
            $.ajax({
                url: 'Customer/Customer',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (data) {
                    self.Customers(data); //Put the response in ObservableArray
                }
            });

            //Add New Item
            self.create = function () {
                if (Customer.Name() != "" &&
                    Customer.Address() != "") {
                    $.ajax({
                        url: 'api/customers',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(Customer),
                        success: function (data) {
                            self.Customers.push(data);
                            self.Name("");
                            self.Address("");
                        }
                    }).fail(
                        function (xhr, textStatus, err) {
                            alert(err);
                        });
                }
                else {
                    alert('Please Enter All the Values !!');
                }
            }
            // Delete Customer details
            self.delete = function (Customer) {
                if (confirm('Are you sure to Delete "' + Customer.Name + '" Customer ??')) {
                    var id = Customer.Id;

                    $.ajax({
                        url: 'api/customers' + id,
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: id,
                        success: function (data) {
                            self.Customers.remove(Customer);
                        }
                    }).fail(
                        function (xhr, textStatus, err) {
                            self.status(err);
                        });
                }
            }

            // Edit Customer details
            self.edit = function (Customer) {
                self.Customer(Customer);
            }

            // Update Customer details
            self.update = function () {
                var Customer = self.Customer();

                $.ajax({
                    url: 'api/customers',
                    cache: false,
                    type: 'PUT',
                    contentType: 'application/json; charset=utf-8',
                    data: ko.toJSON(Customer),
                    success: function (data) {
                        self.Customers.removeAll();
                        self.Customers(data); //Put the response in ObservableArray
                        self.Customer(null);
                        alert("Record Updated Successfully");
                    }
                })
                    .fail(
                        function (xhr, textStatus, err) {
                            alert(err);
                        });
            }

            // Reset Customer details
            self.reset = function () {
                self.Name("");
                self.Address("");
            }

            // Cancel Customer details
            self.cancel = function () {
                self.Customer(null);
            }
        }
        var viewModel = new CustomerViewModel();
        ko.applyBindings(viewModel);
        </script>}