@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")
<h2>Customers</h2>

<table class="table table-light table-hover" id="CustomersTable" data-bind="CustomerModel">
    <thead>
        <tr>
            <th>Customer Name</th>
            <th>Address</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>

    <tbody id="BodyTag" data-bind="foreach: customers">
        <tr>
            <td style="display:none" id="IdTag" data-bind="text: id"></td>
            <td id="NameTag" data-bind="text: name"></td>
            <td id="AddressTag" data-bind="text: address"></td>
            <td>
                <button data-bind="click:$parent.updateBtn" class="btn btn-warning" data-target="#editCustomerModal" data-toggle="modal" type="button">
                    Edit
                </button>
            </td>
            <td>
                <button data-bind="click:$parent.deleteBtn" class="btn btn-danger" data-target="#deleteCustomerModal" data-toggle="modal" type="button">
                    Delete
                </button>
            </td>

        </tr>
    </tbody>
</table>


@section scripts
{
    <script>
        //Load table data
        $(function () {
            //Customise default validation configuration
            ko.validation.init({
                messagesOnModified: true, //Validation activated by triggers
                parseInputAttributes: true, //Validation by HTML5 validation attributes
                registerExtenders: true, //Use custom validation rules in extended observables
                insertMessages: true, //Show validation messages under the binding object
                messageTemplate: null
            });

            //Model
            function Customer(data) {
                this.id = ko.observable(data.id);
                this.name = ko.observable(data.name).extend({ required: { message: 'Please enter a name for the customer.' } });
                this.address = ko.observable(data.address).extend({ required: { message: 'Please enter an address for the customer.' } });
            }

            //Viewmodel
            var CustomerModel = {
                //Two way binding for customer elements
                id: ko.observable(),
                name: ko.observable().extend({ required: { message: "Please enter a name for the customer." } }),
                address: ko.observable().extend({ required: { message: "Please enter an address for the customer." } }),
                customer: ko.observable(),
                customers: ko.observableArray(),

                //Load Customer data to table
                loadCustomers: function () {
                    CustomerModel.customers.removeAll();
                    $.getJSON("api/customers", function (data) {
                        $.each(data, function (key, value) {//jQuery loop
                            CustomerModel.customers.push(new Customer(value));
                        });
                    });
                },

                //Create Customer
                createCustomer: function () {
                    if (CustomerModel.errors().length === 0) {//No validation conflicts before sending data
                        var created = ko.toJSON(this);
                        $.ajax({
                            url: '/api/customers',
                            cache: false,
                            type: 'POST',
                            contentType: 'application/json; charset=utf-8',
                            data: created,
                            success: function (data) {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        CustomerModel.errors.showAllMessages();
                    }
                },

                //Chosen option for update/delete modal
                chosenCustomer: ko.observable(),

                //Delete Customer
                deleteBtn: function (customer) {
                    CustomerModel.chosenCustomer(customer);
                },
                deleteCustomer: function () {
                        var id = ko.toJS(CustomerModel.chosenCustomer()).id;
                        $.ajax({
                            url: "/api/customers/" + id,
                            cache: false,
                            type: "POST",
                            contentType: 'application/json; charset=utf-8',
                            success: function () {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    },

                //Update Customer
                updateBtn: function (customer) {
                    CustomerModel.chosenCustomer(customer);
                    CustomerModel.name.rules.remove(function (x) { return x.rule === "required" });
                    CustomerModel.address.rules.remove(function (x) { return x.rule === "required" });
                },
                changeCustomer: function () {
                    if (CustomerModel.errors().length === 0) {//No validation conflicts before sending data
                        var updatedCustomer = ko.toJS(CustomerModel.chosenCustomer);
                        $.ajax({
                            url: '/api/customers/' + updatedCustomer.id,
                            cache: false,
                            type: 'PUT',
                            contentType: 'application/json; charset=utf-8',
                            data: ko.toJSON(updatedCustomer),
                            processData: true,
                            success: function () {
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        CustomerModel.errors.showAllMessages();
                    }
                },

            }
            //Validate all properties of CustomerModel and its 'child' properties
            CustomerModel.errors = ko.validation.group(CustomerModel, { deep: true });
            ko.applyBindings(CustomerModel);
            CustomerModel.loadCustomers();
        });



    </script>}