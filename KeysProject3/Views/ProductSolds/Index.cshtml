@{
    ViewBag.Title = "Sales";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Sales</h2>

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")

<table data-bind="ProductSoldModel" class="table table-light table-hover" id="ProductSoldsTable">
    <thead>
        <tr>
            <th style="display:none">Id</th>
            <th>Customer Name</th>
            <th>Product Name</th>
            <th>Store Name</th>
            <th>Date Sold</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>
    <tbody id="BodyTag" data-bind="foreach: productSolds">
        <tr>
            <td style="display:none" id="IdTag" data-bind="text: id"></td>
            <td id="CustomerNameTag" data-bind="text: customer.name"></td>
            <td id="ProductNameTag" data-bind="text: product.name"></td>
            <td id="StoreNameTag" data-bind="text: store.name"></td>
            <td id="DateSold" data-bind="text: moment(dateSold).format('DD/MM/YYYY')"></td>
            <td>
                <button data-bind="click:$parent.updateBtn" class="btn btn-warning" data-target="#editProductSoldModal" data-toggle="modal" type="button">
                    Edit
                </button>
            </td>
            <td>
                <button data-bind="click:$parent.deleteBtn" class="btn btn-danger" data-target="#deleteProductSoldModal" data-toggle="modal" type="button">
                    Delete
                </button>
            </td>
        </tr>
    </tbody>
</table>

@section scripts
{
    <script>
        //Load table data
        $(function () {
            //Customise default validation configuration
            ko.validation.init({
                messagesOnModified: true, //Validation activated by triggers
                parseInputAttributes: true, //Validation by HTML5 validation attributes
                registerExtenders: true, //Use custom validation rules in extended observables
                insertMessages: true, //Show validation messages under the binding object
                messageTemplate: null
            });

            //Model
            function ProductSold(data) {

                //Define class ProductSold that tracks data in children items
                this.id = ko.observable(data.id);
                this.customerId = ko.observable(data.customerId);
                this.productId = ko.observable(data.productId);
                this.storeId = ko.observable(data.storeId);
                this.dateSold = ko.observable(data.dateSold).extend({ required: { message: 'Please enter a date DD/MM/YYYY for the product sold.' } });
                this.customer = ko.observable(data.customer);
                this.product = ko.observable(data.product);
                this.store = ko.observable(data.store);
            }

            //Viewmodel
            var ProductSoldModel = {
                id: ko.observable(),
                customerId: ko.observable().extend({ required: { message: 'Please choose a customer for the product sold.' } }),
                productId: ko.observable().extend({ required: { message: 'Please choose a product for the product sold.' } }),
                storeId: ko.observable().extend({ required: { message: 'Please choose a store for the product sold.' } }),
                dateSold: ko.observable().extend({ required: { message: 'Please enter a date DD/MM/YYYY for the product sold.' } }),
                customer: ko.observable(),
                product: ko.observable(),
                store: ko.observable(),
                productSold: ko.observable(),
                productSolds: ko.observableArray(),
                customerList: ko.observableArray(),
                storeList: ko.observableArray(),
                productList: ko.observableArray(),

                // Load data from all tables
                loadProductSolds: function () {
                    ProductSoldModel.productSolds.removeAll();
                    $.getJSON("/api/productsolds", function (data) {
                        $.each(data, function (key, value) {
                            ProductSoldModel.productSolds.push(ko.toJS(new ProductSold(value)));
                        });
                    });
                    $.getJSON("/api/customers", function (data) {
                        ProductSoldModel.customerList(data);
                    });
                    $.getJSON("/api/products", function (data) {
                        ProductSoldModel.productList(data);
                    });
                    $.getJSON("/api/stores", function (data) {
                        ProductSoldModel.storeList(data);
                    });
                },

                //Create Product Sold
                createProductSold: function () {
                    if (ProductSoldModel.errors().length === 0) {//No validation conflicts before sending data
                    $.ajax({
                        url: 'api/productsolds',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(this),
                        success: function (data) {
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                            }
                        });
                    } else {
                        ProductSoldModel.errors.showAllMessages();
                    }
                },

                //Chosen option for update/delete modal
                chosenProductSold: ko.observable(),
                
                //Delete Product Sold
                deleteBtn: function (productSold) {
                    ProductSoldModel.chosenProductSold(productSold);
                },
                deleteProductSold : function () {
                    var id = ko.toJS(ProductSoldModel.chosenProductSold()).id;
                    $.ajax({
                        url: 'api/productsolds/' + id,
                        cache: false,
                        type: 'DELETE',
                        contentType: 'application/json; charset=utf-8',
                        success: function () {
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    });
                },

                //Update Product Sold
                updateBtn: function (productSold) {
                    ProductSoldModel.chosenProductSold(new ProductSold(productSold));
                    ProductSoldModel.customerId.rules.remove(function (x) { return x.rule === "required" });
                    ProductSoldModel.productId.rules.remove(function (x) { return x.rule === "required" });
                    ProductSoldModel.storeId.rules.remove(function (x) { return x.rule === "required" });
                    ProductSoldModel.dateSold.rules.remove(function (x) { return x.rule === "required" });
                    ProductSoldModel.customerList.removeAll();
                    ProductSoldModel.productList.removeAll();
                    ProductSoldModel.storeList.removeAll();
                    //Check for any new children items to push
                    ProductSoldModel.customerList.push(ko.toJS(ProductSoldModel.chosenProductSold()).customer);
                    $.getJSON("/api/customers", function (data) {
                        $.each(data, function (key, customer) {
                            if (customer.id !== ProductSoldModel.chosenProductSold().customerId) {
                                ProductSoldModel.customerList.push(customer);
                            }
                        });
                    });
                    ProductSoldModel.productList.push(ko.toJS(ProductSoldModel.chosenProductSold()).product);
                    alert(ko.toJSON(ProductSoldModel.chosenProductSold().product));
                    $.getJSON("/api/products", function (data) {
                        $.each(data, function (key, product) {
                            if (product.id !== ProductSoldModel.chosenProductSold().productId) {
                                ProductSoldModel.productList.push(product);
                            }
                        });
                    });
                    ProductSoldModel.storeList.push(ko.toJS(ProductSoldModel.chosenProductSold()).store);
                    $.getJSON("/api/stores", function (data) {
                        $.each(data, function (key, store) {
                            if (store.id !== ProductSoldModel.chosenProductSold().storeId) {
                                ProductSoldModel.storeList.push(store);
                            }
                        });
                    });
                },

                    changeProductSold: function () {
                        if (ProductSoldModel.errors().length === 0) {//No validation conflicts before sending data
                    var updatedProductSold = ko.toJS(ProductSoldModel.chosenProductSold);
                    $.ajax({
                        url: "/api/productsolds/" + updatedProductSold.id,
                        cache: false,
                        type: 'PUT',
                        data: ko.toJSON(ProductSoldModel.chosenProductSold),
                        contentType: "application/json",
                        processData: true,
                        success: function () {
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                            }
                        });
                    } else {
                            ProductSoldModel.errors.showAllMessages();
                    }
                },
            }
            //Validate all properties of ProductSoldModel and its 'child' properties
            ProductSoldModel.errors = ko.validation.group(ProductSoldModel, { deep: true });
            ko.applyBindings(ProductSoldModel);
            ProductSoldModel.loadProductSolds();
        });
    </script>}