
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Sales</h2>

@Scripts.Render("~/bundles/Library")
@Html.Partial("_Modal")

<table class="table table-light table-hover" id="ProductSoldsTable">
    <thead>
        <tr>
            <th>Customer Name</th>
            <th>Product Name</th>
            <th>Store Name</th>
            <th>Date Sold</th>
            <th>Action(Edit)</th>
            <th>Action(Delete)</th>
        </tr>
    </thead>
    <tbody id="BodyTag" data-bind="foreach: ProductSolds">
        <tr>
            <td style="display:none" id="IdTag" data-bind="text: id"></td>
            <td id="CustomerNameTag" data-bind="text: customerid"></td>
            <td id="ProductNameTag" data-bind="text: productid"></td>
            <td id="StoreNameTag" data-bind="text: storeid"></td>
            <td id="DateSold" data-bind="text: dataesold"></td>
            <td>
                <button class="btn btn-warning" data-target="#editProductSoldModal" data-toggle="modal" type="button">
                    Edit
                </button>
            </td>
            <td>
                <button class="btn btn-danger" data-target="#deleteProductSoldModal" data-toggle="modal" type="button">
                    Delete
                </button>
            </td>
        </tr>
    </tbody>
</table>

@section scripts
{
    <script>
        //Load table data
        $(function () {
            function ProductSoldModel(id, customerid, productid, storeid, datesold) {
                var self = this;

                //Two way binding for sales elements
                self.id = ko.observable("");
                self.customerid = ko.observable("");
                self.productid = ko.observable("");
                self.storeid = ko.observable("");
                self.datesold = ko.observable("");

                var ProductSold = {
                    id: self.id,
                    customerid: self.customerid,
                    productid: self.productid,
                    storeid: self.storeid,
                    datesold: self.datesold
                };

                self.ProductSold = ko.observable();
                self.ProductSolds = ko.observableArray([]);

                $.ajax({
                    url: 'api/productsolds',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (data) {
                        self.ProductSolds(data);
                    }
                });

                //Create Product Sold
                self.create = function () {

                    $.ajax({
                        url: 'api/productsolds',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(ProductSold),
                        success: function (data) {
                            self.ProductSold.push(data);
                            self.id(null);
                            self.customerid("");
                            self.productid("");
                            self.storeid("");
                            self.datesold("");

                        }
                    })
                }
                //Delete Product Sold
                self.delete = function () {
                    $.ajax({
                        url: 'api/productsolds' + id,
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: id,
                        success: function (data) {
                            self.ProductSolds.remove(ProductSold);
                        }
                    })
                }

                //Update Product Sold
                self.update = function () {
                    $.ajax({
                        url: 'api/productsolds',
                        cache: false,
                        type: 'PUT',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(Product),
                        success: function (data) {
                            self.ProductSolds.removeAll();
                            self.ProductSolds(data); //Put the response in ObservableArray
                            self.ProductSold(null);
                            alert("Record Updated Successfully");
                        }
                    })
                }

            }

            var ProductSoldViewModel = new ProductSoldModel();
            ko.applyBindings(ProductSoldViewModel);
        });
    </script>
}